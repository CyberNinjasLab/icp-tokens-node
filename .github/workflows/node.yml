name: node-services

on:
  push:
    tags:
      - v*
    branches:
      - main
    paths:
      - 'services/**'
  pull_request:
    paths:
      - 'services/**'

permissions:
  actions: read
  contents: write
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FOLDER_LOCATION: services
  IMAGE_REPOSITORY: ghcr.io/cyberninjaslab/icp-tokens-node

jobs:
  file-changes:
    name: file-changes
    runs-on: ubuntu-latest
    outputs:
      dirs: ${{ steps.matrix.outputs.dirs }}
    steps:
      - uses: actions/checkout@v4
      - name: Get changed files
        id: changes
        uses: tj-actions/changed-files@v44

      - name: Changed files matrix
        id: matrix
        env:
          MODIFIED_FILES: ${{ steps.changes.outputs.all_modified_files }}
        run: |
          set -x
          modified_files=($(echo "$MODIFIED_FILES" | tr " " "\n"))
          dirs=($(ls ${{ env.FOLDER_LOCATION }} | tr -d " "))
          echo "Directories: ${dirs[@]}"
          changed_dirs=()
          include_all_dirs=false

          if [ "$include_all_dirs" = true ]; then
            for dir in "${dirs[@]}"; do
              changed_dirs+=("$dir")
            done
          else
            for dir in "${dirs[@]}"; do
              if [ ! -f "${{ env.FOLDER_LOCATION }}/$dir/prod.Dockerfile" ]; then
                break
              fi
              for file in "${modified_files[@]}"; do
                if [[ $file =~ ${{ env.FOLDER_LOCATION }}/$dir/.* ]]; then
                  changed_dirs+=("$dir")
                  break
                fi
              done
            done
          fi

          echo "Changed directories:"
          printf "%s\n" "${changed_dirs[@]}"
          dirs_output=$(jq -nc '[$ARGS.positional[]]' --args "${changed_dirs[@]}")
          echo "dirs=$dirs_output" >> $GITHUB_OUTPUT

  docker:
    runs-on: ubuntu-latest
    needs: [file-changes]
    if: ${{ needs.file-changes.outputs.dirs != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJSON(needs.file-changes.outputs.dirs) }}
    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v8

      - uses: pnpm/action-setup@v4

      # Cache node_modules
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'

      - run: pnpm install --frozen-lockfile -F @icptokens/${{ matrix.project }}

      - run: pnpm exec turbo run -F @icptokens/${{ matrix.project }} build
        env:
          TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}

      - run: docker compose -f ./docker-compose.yml build ${{ matrix.project }}
        env:
          TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}

      - name: Bump version and push tag
        id: tag_version
        if: steps.branch-name.outputs.is_default == 'true'
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag_prefix: ${{matrix.project}}/v
          release_branches: main
          fetch_all_tags: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker Images (Snapshot)
        if: steps.branch-name.outputs.is_default != 'true'
        run: |
          docker tag $IMAGE_REPOSITORY/$IMAGE_NAME:latest $IMAGE_REPOSITORY/$IMAGE_NAME:${GITHUB_SHA}
          docker push $IMAGE_REPOSITORY/$IMAGE_NAME:${GITHUB_SHA}
          docker push $IMAGE_REPOSITORY/$IMAGE_NAME:latest
        env:
          IMAGE_NAME: ${{ matrix.project }}

      - name: Push Docker Images (Tag/Latest)
        if: steps.branch-name.outputs.is_default == 'true'
        run: |
          docker tag $IMAGE_REPOSITORY/$IMAGE_NAME:latest $IMAGE_REPOSITORY/$IMAGE_NAME:v$VERSION
          docker tag $IMAGE_REPOSITORY/$IMAGE_NAME:latest $IMAGE_REPOSITORY/$IMAGE_NAME:${GITHUB_SHA}
          docker push $IMAGE_REPOSITORY/$IMAGE_NAME:${GITHUB_SHA}
          docker push $IMAGE_REPOSITORY/$IMAGE_NAME:v$VERSION
          docker push $IMAGE_REPOSITORY/$IMAGE_NAME:latest
        env:
          IMAGE_NAME: ${{ matrix.project }}
          VERSION: ${{ steps.tag_version.outputs.new_version }}
